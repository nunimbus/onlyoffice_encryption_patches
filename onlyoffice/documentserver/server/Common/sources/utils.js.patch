--- Common/sources/utils.js	2022-05-24 20:33:27.523000000 -0500
+++ Common/sources/utils.patched.js	2022-05-24 21:42:53.886000000 -0500
@@ -95,10 +95,101 @@
 let outboxUrlExclusionRegex = null;
 if ("" !== cfgTokenOutboxUrlExclusionRegex) {
   outboxUrlExclusionRegex = new RegExp(cfgTokenOutboxUrlExclusionRegex);
 }
 
+var CryptoJS = require('crypto-js');
+
+/**
+ * Adapted from:
+ * AES JSON formatter for CryptoJS
+ * @link https://github.com/brainfoolong/cryptojs-aes-php
+ * @version 2.1.1
+ */
+
+ var SessionData = {
+  sessionData: null,
+  secret: null,
+  cookieName: null,
+
+  /**
+   * Encrypt any value
+   * @param {*} value
+   * @param {string} password
+   * @return {string}
+   */
+  'encrypt': function (value, password = this.secret) {
+    const ciphertext = CryptoJS.AES.encrypt(JSON.stringify(value), password, { format: SessionData }).toString();
+    const buff = Buffer.from(ciphertext, 'utf-8');
+    const base64 = buff.toString('base64');
+    return base64;
+  },
+  /**
+   * Decrypt a previously encrypted value
+   * @param {string} jsonStr
+   * @param {string} password
+   * @return {*}
+   */
+  'decrypt': function (data, password = this.secret) {
+    this.cookieName = data.split('=')[0];
+/**
+    return data.split('=')[1];
+/**/
+    const buff = Buffer.from(data.split(';')[0].split('=')[1], 'base64');
+    var jsonStr = buff.toString('utf-8');
+
+    try {
+      return JSON.parse(CryptoJS.AES.decrypt(jsonStr, password, { format: SessionData }).toString(CryptoJS.enc.Utf8))
+    } catch (err) {
+      jsonStr = jsonStr.substr(0, jsonStr.lastIndexOf("\}") + 1);
+      return JSON.parse(CryptoJS.AES.decrypt(jsonStr, password, { format: SessionData }).toString(CryptoJS.enc.Utf8))
+    }
+  },
+  /**
+   * Stringify cryptojs data
+   * @param {Object} cipherParams
+   * @return {string}
+   */
+  'stringify': function (cipherParams) {
+    var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) }
+    if (cipherParams.iv) j.iv = cipherParams.iv.toString()
+    if (cipherParams.salt) j.s = cipherParams.salt.toString()
+    return JSON.stringify(j).replace(/\s/g, '')
+  },
+  /**
+   * Parse cryptojs data
+   * @param {string} jsonStr
+   * @return {*}
+   */
+  'parse': function (jsonStr) {
+    var j = JSON.parse(jsonStr)
+    var cipherParams = CryptoJS.lib.CipherParams.create({ ciphertext: CryptoJS.enc.Base64.parse(j.ct) })
+    if (j.iv) cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv)
+    if (j.s) cipherParams.salt = CryptoJS.enc.Hex.parse(j.s)
+    return cipherParams
+  },
+  'get': function(encrypted = 0) {
+    if (this.sessionData == null) {
+      return 0;
+    }
+    if (encrypted) {
+      return this.cookieName + '=' + this.sessionData; //this.encrypt(this.sessionData);
+    }
+    return this.sessionData;
+  },
+  'set': function(str, encrypted = 1) {
+    if (encrypted) {
+      this.sessionData = decodeURIComponent(this.decrypt(str));
+    }
+    else {
+      this.sessionData = str;
+    }
+  }
+}
+
+SessionData.secret = config.get('services.CoAuthoring.secret.session.string');
+
 var g_oIpFilterRules = function() {
   var res = [];
   for (var i = 0; i < cfgIpFilterRules.length; ++i) {
     var rule = cfgIpFilterRules[i];
     var regExpStr = rule['address'].split('*').map(escapeStringRegexp).join('.*');
@@ -261,10 +352,19 @@
 function isRedirectResponse(response) {
   return response && response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location');
 }
 function downloadUrlPromise(uri, optTimeout, optLimit, opt_Authorization, opt_filterPrivate, opt_headers, opt_streamWriter) {
   //todo replace deprecated request module
+  if (! opt_headers) {
+    var opt_headers = {};
+  }
+  if (this.SessionData.get()) {
+    opt_headers['Cookie'] = this.SessionData.get();
+  }
+  if (opt_Authorization) {
+    opt_headers[cfgTokenOutboxHeader] = cfgTokenOutboxPrefix + opt_Authorization;
+  }
   const maxRedirects = (undefined !== cfgRequestDefaults.maxRedirects) ? cfgRequestDefaults.maxRedirects : 10;
   const followRedirect = (undefined !== cfgRequestDefaults.followRedirect) ? cfgRequestDefaults.followRedirect : true;
   var redirectsFollowed = 0;
   let doRequest = function(curUrl) {
     return downloadUrlPromiseWithoutRedirect(curUrl, optTimeout, optLimit, opt_Authorization, opt_filterPrivate, opt_headers, opt_streamWriter)
@@ -372,10 +472,21 @@
       }, ms(optTimeout.wholeCycle));
     }
   });
 }
 function postRequestPromise(uri, postData, postDataStream, postDataSize, optTimeout, opt_Authorization, opt_header) {
+  if (! opt_header) {
+    var opt_header = {};
+  }
+  if (this.SessionData.get()) {
+    opt_header['Cookie'] = this.SessionData.get();
+  }
+  if (opt_Authorization) {
+    opt_header[cfgTokenOutboxHeader] = cfgTokenOutboxPrefix + opt_Authorization;
+  }
+  opt_header['Content-Type'] = 'application/json';
+
   return new Promise(function(resolve, reject) {
     //IRI to URI
     uri = URI.serialize(URI.parse(uri));
     var urlParsed = url.parse(uri);
     var headers = {'Content-Type': 'application/json'};
@@ -1016,5 +1127,6 @@
     startDate.addMonths(-1);
   }
   startDate.setUTCHours(0,0,0,0);
   return startDate.getTime();
 };
+exports.SessionData = SessionData;
